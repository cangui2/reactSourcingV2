[{"D:\\Dev\\reactSourcingV2\\src\\index.js":"1","D:\\Dev\\reactSourcingV2\\src\\component\\results.js":"2","D:\\Dev\\reactSourcingV2\\src\\component\\search.js":"3","D:\\Dev\\reactSourcingV2\\src\\component\\details.js":"4","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js":"5"},{"size":2131,"mtime":1611049449158,"results":"6","hashOfConfig":"7"},{"size":2083,"mtime":1611049707048,"results":"8","hashOfConfig":"7"},{"size":8035,"mtime":1611049425366,"results":"9","hashOfConfig":"7"},{"size":413,"mtime":1611049570356,"results":"10","hashOfConfig":"7"},{"size":5655,"mtime":1611049522120,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1q000gm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"19"},"D:\\Dev\\reactSourcingV2\\src\\index.js",["26","27","28"],"D:\\Dev\\reactSourcingV2\\src\\component\\results.js",["29"],"D:\\Dev\\reactSourcingV2\\src\\component\\search.js",["30","31","32","33","34","35","36"],"import {Badge, Col, Container, Form, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\r\nimport AsyncSelect from 'react-select/async';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport axios from 'axios'\r\nimport {Range} from \"react-range\";\r\nimport {ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    // All constant useState\r\n    const [valueMetier, setValueMetier] = useState([]);\r\n    const [valueVille, setValueVille] = useState('');\r\n    const [keyWord, setKeyWord] = useState('');\r\n    const [recruteur, setRecruteur] = useState('6');\r\n    const [statusRecruteur, setStatusRecruteur] = useState(false);\r\n    const [range, setRange] = useState([1]);\r\n    const [finalRange, setFinalRange] = useState([1]);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [noRefrech, setNoRefresh] = useState(true);\r\n    const [countCv, setCountCv] = useState(props.countCV);\r\n\r\n\r\n    // Recherche Api\r\n    const loadOptionMetier = (valueMetier, callback) => {\r\n        console.log(axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier))\r\n        axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier)\r\n            .then((met) => {\r\n                callback(met.data);\r\n            });\r\n    }\r\n    const loadOtionVille = (value, callback) => {\r\n        axios.get(\"https://127.0.0.1:8000/api/villes?nom=\" + value)\r\n            .then((vil) => {\r\n                callback(vil.data);\r\n            });\r\n    }\r\n    // Si la valeur change on modifie.\r\n    const handleChangeMetier = value => {\r\n        setValueMetier(value);\r\n\r\n    }\r\n    const changeParam = () => {\r\n        let params = [];\r\n        if (keyWord) {\r\n            params.push('keyword=' + keyWord);\r\n        }\r\n        if (statusRecruteur) {\r\n            params.push('recruteur=6');\r\n        }\r\n        if (valueVille) {\r\n            params.push('ville=' + valueVille);\r\n            params.push('rayon=' + range);\r\n        }\r\n\r\n        props.onDemandeCvChanged(params.join(\"&\"));\r\n    }\r\n    useEffect(() => {\r\n        if (noRefrech === false) {\r\n            setCountCv(props.countCV);\r\n            changeParam();\r\n        } else {\r\n        }\r\n    }, [keyWord, valueVille, finalRange, statusRecruteur, noRefrech])\r\n\r\n    return (\r\n        <Container style={styleSearch}>\r\n            <Row style={{marginLeft: '0', marginRight: '0', paddingTop: '10px'}}>\r\n                <Col>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\">\r\n                        <ToggleButton\r\n                            type=\"checkbox\"\r\n                            variant='info'\r\n                            value={2}\r\n                            onChange={() => {\r\n                                setNoRefresh(false)\r\n                            }}\r\n                            onClick={() => setStatusRecruteur(true)}\r\n                        >\r\n                            Ma Cvthèque\r\n                        </ToggleButton>\r\n\r\n                        &emsp;\r\n\r\n                        <ToggleButton\r\n                            type=\"radio\"\r\n                            variant=\"info\"\r\n                            value={1}\r\n                            onChange={() => setStatusRecruteur(false)}\r\n                            onClick={() => setNoRefresh(false)}\r\n                        >\r\n                            Candidathèque\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridAddress1\">\r\n                        <Form.Label>Mot clé</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Metier, Competence ...\"\r\n                             // onChange={e => {\r\n                             //     setKeyWord(e.target.value)\r\n                             // }}\r\n                            onChange={e => {\r\n                                setKeyWord(e.target.value)\r\n                            }}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Metier</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOptionMetier}\r\n                            getOptionLabel={met => met.libelle}\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez le metier\"\r\n                            onChange={handleChangeMetier}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Ville</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOtionVille}\r\n                            getOptionLabel={vil => vil.nom}\r\n                            isClearable={true}\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez la ville..\"\r\n                            onChange={value => {\r\n                                if (value) {\r\n                                    setValueVille(value.id);\r\n                                    setDisabled(false)\r\n                                } else {\r\n                                    setDisabled(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                    <Range\r\n                        step={0.1}\r\n                        min={1}\r\n                        max={150}\r\n                        values={range}\r\n                        disabled={disabled}\r\n                        onChange={values => setRange(values)}\r\n                        onFinalChange={values => setFinalRange(values)}\r\n                        renderTrack={({props, children}) => (\r\n                            <div\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n                                    height: '6px',\r\n                                    width: '100%',\r\n                                    backgroundColor: '#ccc'\r\n                                }}\r\n                            >\r\n                                {children}\r\n                            </div>\r\n                        )}\r\n                        renderThumb={({props}) => (\r\n                            <div\r\n\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n\r\n                                    height: '22px',\r\n                                    width: '22px',\r\n                                    backgroundColor: '#999'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <output style={{marginTop: \"30px\"}} id=\"output\">\r\n                        Distance sélectionnée {range - 1} Km\r\n                    </output>\r\n                    <output style={{marginTop: \"30px\"}} id=\"output\">\r\n                        Nombre de Cv disponible: {props.total}\r\n                    </output>\r\n                    <br/>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </Container>\r\n    )\r\n};\r\nconst styleSearch = {\r\n    position:'fixed',\r\n    backgroundColor: 'white',\r\n    opacity: '0.9',\r\n    marginTop: '10px',\r\n    boxShadow: \"10px 10px 1px #9E9E9E\",\r\n    minHeight: '90vh',\r\n    maxWidth: '365px',\r\n}\r\nexport default Search;\r\n",["37","38"],"D:\\Dev\\reactSourcingV2\\src\\component\\details.js",["39","40","41","42"],"import React, {useEffect, useState} from \"react\";\r\nimport CVViewer from \"./CVViewer\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\n\r\n\r\nfunction Details(props) {\r\n    if (props.cv.length !== 0) {\r\n        return (\r\n            <CVViewer cv={props.cv}/>\r\n        )\r\n    } else if (props.cv.length === 0) {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details;\r\n\r\n\r\n\r\n","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js",["43"],"import React from 'react';\r\nimport avatar from '../avatar.png'\r\n\r\nimport './CV.css';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nconst CVViewer = (props) => {\r\n    return (\r\n        <div className=\"paper\" style={paperStyle}>\r\n            <link rel=\"stylesheet\" href=\"/template3-7.css\"/>\r\n            <section className=\"identite\">\r\n                <div className=\"nom\">{props.cv.candidat.prenom} {props.cv.candidat.nom}</div>\r\n                <section className=\"photo\">\r\n                    <div className=\"portrait\"><img src={avatar} style={{\r\n                        width: '15%',\r\n                        paddingTop: '32px',\r\n                        paddingLeft: '3px',\r\n                        float: 'right'\r\n                    }}/>\r\n                    </div>\r\n                </section>\r\n            </section>\r\n            <section className=\"profil\">\r\n                <header>Contact</header>\r\n                <div className=\"adresse\">{props.cv.candidat.adresse}</div>\r\n                <div className=\"ville\">{props.cv.candidat.ville}</div>\r\n                <div className=\"phone\">{props.cv.candidat.telephone}</div>\r\n                <div className=\"email\">{props.cv.candidat.email}</div>\r\n            </section>\r\n            <section className=\"titre\">\r\n                <div className=\"poste\">{props.cv.metier.libelle}</div>\r\n            </section>\r\n            <section className=\"intro\">\r\n                <header>Profil</header>\r\n                <div className=\"text\">{props.cv.titre}</div>\r\n            </section>\r\n            <section className=\"experiences\">\r\n                <header>Experiences</header>\r\n                <div>\r\n                    {props.cv.experiences.map(experience => (\r\n                        <div className=\"experience\">\r\n                            <div className=\"date-debut\"><Moment format=\"DD/MM/YYYY\">{experience.dateDebut}</Moment>\r\n                            </div>\r\n                            <div className=\"date-fin\"><Moment format=\"DD/MM/YYYY\">{experience.dateFin}</Moment></div>\r\n                            <div className=\"entreprise\">{experience.entreprise}</div>\r\n                            <div className=\"ville\">{experience.ville}</div>\r\n                            <div className=\"logo\">{experience.logo}</div>\r\n                            <div className=\"titre\">{experience.titre}</div>\r\n                            <div className=\"desciption\">{experience.description}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </section>\r\n            <section className=\"formations\">\r\n                <header>Formations</header>\r\n                <div>\r\n                    {props.cv.formations.map(formations => (\r\n                        <div className=\"formation\">\r\n                            <div className=\"date-debut\"><Moment format=\"DD/MM/YYYY\">{formations.dateDebut}</Moment>\r\n                            </div>\r\n                            <div className=\"date-fin\"><Moment format=\"DD/MM/YYYY\">{formations.dateFin}</Moment></div>\r\n                            <div className=\"ecole\">{formations.ecole}</div>\r\n                            <div className=\"titre\">{formations.diplome}</div>\r\n                            <div className=\"niveau\">{formations.niveau}</div>\r\n                            <div className=\"desciption\">{formations.description}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </section>\r\n            <section className=\"competences\">\r\n                <header>Competences</header>\r\n                <div>\r\n                    {\r\n                        props.cv.competences.map((competence, index) =>\r\n                            <div className=\"competence\" key={index}>\r\n                                <div className=\"libelle\">{competence.libelle}</div>\r\n                                <div className={\"niveau niveau-\" + competence.niveau}>{competence.niveau}</div>\r\n                                <meter max=\"5\" value={competence.niveau}></meter>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </section>\r\n            <section className=\"langues\">\r\n                <header>Langues</header>\r\n                <div>\r\n                    {\r\n                        props.cv.langues.map((langues, index) =>\r\n                            <div className=\"langue\" key={index}>\r\n                                <div className=\"libelle\">{langues.nom}</div>\r\n                                <div className=\"niveau\">{langues.niveau}</div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </section>\r\n            <section className=\"reseaux\">\r\n                <header>Réseaux</header>\r\n                <div>\r\n                    {\r\n                        props.cv.reseaux.map((reseau, index) =>\r\n                            <div className=\"reseau\" key={index}>\r\n                                <div className=\"libelle no-screen\">{reseau.type}</div>\r\n                                <div className=\"libelle no-screen\">{reseau.url}</div>\r\n                                <div className=\"niveau no-print\">\r\n                                    <a href=\"{reseau.url}\">{reseau.type}</a>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\nexport default CVViewer;\r\n\r\nconst paperStyle = {\r\n    position: 'fixed',\r\n    marginTop: '-10px',\r\n    fontSize: '11px',\r\n    maxHeight: '100px'\r\n}\r\n",{"ruleId":"44","severity":1,"message":"45","line":2,"column":16,"nodeType":"46","messageId":"47","endLine":2,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":12,"column":9,"nodeType":"46","messageId":"47","endLine":12,"endColumn":14},{"ruleId":"44","severity":1,"message":"49","line":19,"column":12,"nodeType":"46","messageId":"47","endLine":19,"endColumn":21},{"ruleId":"44","severity":1,"message":"50","line":1,"column":9,"nodeType":"46","messageId":"47","endLine":1,"endColumn":19},{"ruleId":"44","severity":1,"message":"51","line":1,"column":9,"nodeType":"46","messageId":"47","endLine":1,"endColumn":14},{"ruleId":"44","severity":1,"message":"52","line":6,"column":9,"nodeType":"46","messageId":"47","endLine":6,"endColumn":23},{"ruleId":"44","severity":1,"message":"53","line":13,"column":12,"nodeType":"46","messageId":"47","endLine":13,"endColumn":23},{"ruleId":"44","severity":1,"message":"54","line":16,"column":12,"nodeType":"46","messageId":"47","endLine":16,"endColumn":21},{"ruleId":"44","severity":1,"message":"55","line":16,"column":23,"nodeType":"46","messageId":"47","endLine":16,"endColumn":35},{"ruleId":"44","severity":1,"message":"56","line":22,"column":12,"nodeType":"46","messageId":"47","endLine":22,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":65,"column":8,"nodeType":"59","endLine":65,"endColumn":69,"suggestions":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":16,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"65","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":35},{"ruleId":"44","severity":1,"message":"48","line":3,"column":9,"nodeType":"46","messageId":"47","endLine":3,"endColumn":14},{"ruleId":"44","severity":1,"message":"52","line":3,"column":16,"nodeType":"46","messageId":"47","endLine":3,"endColumn":30},{"ruleId":"66","severity":1,"message":"67","line":21,"column":47,"nodeType":"68","endLine":22,"endColumn":130},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'noRefrech' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'Badge' is defined but never used.","'ToastContainer' is defined but never used.","'valueMetier' is assigned a value but never used.","'recruteur' is assigned a value but never used.","'setRecruteur' is assigned a value but never used.","'countCv' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeParam' and 'props.countCV'. Either include them or remove the dependency array. If 'setCountCv' needs the current value of 'props.countCV', you can also switch to useReducer instead of useState and read 'props.countCV' in the reducer.","ArrayExpression",["69"],"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"72","fix":"73"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [keyWord, valueVille, finalRange, statusRecruteur, noRefrech, props.countCV, changeParam]",{"range":"74","text":"75"},[2239,2300],"[keyWord, valueVille, finalRange, statusRecruteur, noRefrech, props.countCV, changeParam]"]