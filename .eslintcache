[{"D:\\Dev\\reactSourcingV2\\src\\index.js":"1","D:\\Dev\\reactSourcingV2\\src\\component\\results.js":"2","D:\\Dev\\reactSourcingV2\\src\\component\\search.js":"3","D:\\Dev\\reactSourcingV2\\src\\component\\details.js":"4","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js":"5"},{"size":2582,"mtime":1611041645915,"results":"6","hashOfConfig":"7"},{"size":1911,"mtime":1611041645915,"results":"8","hashOfConfig":"7"},{"size":8061,"mtime":1611041718248,"results":"9","hashOfConfig":"7"},{"size":433,"mtime":1611041645915,"results":"10","hashOfConfig":"7"},{"size":5650,"mtime":1611048346736,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1q000gm",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"15"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Dev\\reactSourcingV2\\src\\index.js",["27","28","29","30","31"],"import ReactDOM from 'react-dom';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport axios from 'axios'\r\nimport Search from \"./component/search\";\r\nimport Results from \"./component/results\";\r\nimport Details from \"./component/details\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst App = (props) => {\r\n    // all const\r\n    const [liste, setListe] = useState([]);\r\n    const [item, setItem] = useState(null);\r\n    const [cvCandidat, setCvCandidat] = useState([]);\r\n    const [noRefrech, setNoRefresh] = useState(true);\r\n    /*-------------------------------------------------------------*/\r\n    const handleCvRequest = (param) => {\r\n            setNoRefresh(false);\r\n        axios.get(`https://127.0.0.1:8000/api/sourcing?` + param)\r\n\r\n            .then((result) => {\r\n\r\n                setListe(result.data);\r\n\r\n                setCvCandidat([]);\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n\r\n    const handleCv = (cv) => {\r\n\r\n        axios.get(`https://127.0.0.1:8000/api/c_vs?id=` + cv)\r\n            .then((result) => {\r\n\r\n                setCvCandidat(result.data[0]);\r\n\r\n            })\r\n    }\r\n\r\n    // const test = (value) => {\r\n    //     toast.dark((\"Nombre de Cv disponible\" + \" \" + value), {\r\n    //         position: toast.POSITION.BOTTOM_LEFT,\r\n    //     });\r\n    //\r\n    // }\r\n    //\r\n    // useEffect(() => {\r\n    //     if(noRefrech===false){\r\n    //         test(liste.length);\r\n    //     }\r\n    //\r\n    // }, [liste])\r\nconsole.log(cvCandidat)\r\n    return (\r\n        <Container fluid style={styleSearch}>\r\n            <Row>\r\n                <Col md={3}>\r\n                    <Search\r\n                        onDemandeCvChanged={(param) => handleCvRequest(param)}\r\n                        total={liste.length}\r\n                    />\r\n\r\n                </Col>\r\n\r\n                <Col md={4} style={border}>\r\n                    <Results liste={liste} onReceiveCv={(cv) => handleCv(cv)}/>\r\n                </Col>\r\n\r\n                <Col md={5} style={border}>\r\n                    <Details cv={cvCandidat}/>\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst styleSearch = {\r\n\r\n\r\n    minHeight: \"90vh\",\r\n\r\n\r\n}\r\n\r\nconst border = {\r\n\r\n\r\n    minHeight: \"90vh\",\r\n\r\n\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('react_sourcing')\r\n);\r\n\r\n\r\n",["32","33"],"D:\\Dev\\reactSourcingV2\\src\\component\\results.js",["34"],"import {Breadcrumb, Card, CardColumns, Col, Image, Row} from \"react-bootstrap\";\r\nimport React, {useState} from \"react\";\r\nimport image from \"../avatar.png\"\r\n\r\n\r\nfunction Results(props) {\r\n\r\n    const [select, setSelect] = useState('0')\r\n    if (props.liste.length>0){\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                {props.liste.map((item, index) => (\r\n                    <div onClick={() => {\r\n                        props.onReceiveCv(item.id);\r\n                        setSelect(index)\r\n                    }}>\r\n                        <CardColumns>\r\n                            <Card style={styleSearch} key={index} className={select === index ? 'select' : ''}>\r\n                                <Card.Body>\r\n                                    <Card.Title>{item.metLibele}\r\n                                    </Card.Title>\r\n                                    <Image style={{float: 'right', width: '15%'}} src={image} roundedCircle/>\r\n                                    <Card.Subtitle className=\"mb-2 text-muted\">{item.nom} {item.prenom}</Card.Subtitle>\r\n                                    <Card.Text>\r\n                                        {item.adresse}\r\n                                        <br/>\r\n                                        {item.ville}\r\n                                        <br/>\r\n                                        {item.telephone}\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </CardColumns>\r\n                    </div>\r\n                ))}\r\n            </Col>\r\n        </Row>\r\n    )\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Results;\r\nconst styleSearch = {\r\n\r\n\r\n    width: '25rem',\r\n    marginTop: '0px',\r\n    boxShadow: \"5px 5px 1px #9E9E9E\",\r\n    opacity: '0.9',\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","D:\\Dev\\reactSourcingV2\\src\\component\\search.js",["35","36","37","38","39","40","41"],"import {Badge, Col, Container, Form, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\r\nimport AsyncSelect from 'react-select/async';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport axios from 'axios'\r\nimport {Range} from \"react-range\";\r\nimport {ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    // All constant useState\r\n    const [valueMetier, setValueMetier] = useState([]);\r\n    const [valueVille, setValueVille] = useState('');\r\n    const [keyWord, setKeyWord] = useState('');\r\n    const [recruteur, setRecruteur] = useState('6');\r\n    const [statusRecruteur, setStatusRecruteur] = useState(false);\r\n    const [range, setRange] = useState([1]);\r\n    const [finalRange, setFinalRange] = useState([1]);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [noRefrech, setNoRefresh] = useState(true);\r\n    const [countCv, setCountCv] = useState(props.countCV);\r\n\r\n\r\n    // Recherche Api\r\n    const loadOptionMetier = (valueMetier, callback) => {\r\n        console.log(axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier))\r\n        axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier)\r\n            .then((met) => {\r\n                callback(met.data);\r\n            });\r\n    }\r\n    const loadOtionVille = (value, callback) => {\r\n        axios.get(\"https://127.0.0.1:8000/api/villes?nom=\" + value)\r\n            .then((vil) => {\r\n                callback(vil.data);\r\n            });\r\n    }\r\n    // Si la valeur change on modifie.\r\n    const handleChangeMetier = value => {\r\n        setValueMetier(value);\r\n\r\n    }\r\n    const changeParam = () => {\r\n        let params = [];\r\n        if (keyWord) {\r\n            params.push('keyword=' + keyWord);\r\n        }\r\n        if (statusRecruteur) {\r\n            params.push('recruteur=6');\r\n        }\r\n        if (valueVille) {\r\n            params.push('ville=' + valueVille);\r\n            params.push('rayon=' + range);\r\n        }\r\n\r\n        props.onDemandeCvChanged(params.join(\"&\"));\r\n    }\r\n    useEffect(() => {\r\n        if (noRefrech === false) {\r\n            setCountCv(props.countCV);\r\n            changeParam();\r\n        } else {\r\n        }\r\n    }, [keyWord, valueVille, finalRange, statusRecruteur, noRefrech])\r\n\r\n    return (\r\n        <Container style={styleSearch}>\r\n            <Row style={{marginLeft: '0', marginRight: '0', paddingTop: '10px'}}>\r\n                <Col>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\">\r\n                        <ToggleButton\r\n                            type=\"checkbox\"\r\n                            variant='info'\r\n                            value={2}\r\n                            onChange={() => {\r\n                                setNoRefresh(false)\r\n                            }}\r\n                            onClick={() => setStatusRecruteur(true)}\r\n                        >\r\n                            Ma Cvth√®que\r\n                        </ToggleButton>\r\n\r\n                        &emsp;\r\n\r\n                        <ToggleButton\r\n                            type=\"radio\"\r\n                            variant=\"info\"\r\n                            value={1}\r\n                            onChange={() => setStatusRecruteur(false)}\r\n                            onClick={() => setNoRefresh(false)}\r\n                        >\r\n                            Candidath√®que\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridAddress1\">\r\n                        <Form.Label>Mot cl√©</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Metier, Competence ...\"\r\n                             // onChange={e => {\r\n                             //     setKeyWord(e.target.value)\r\n                             // }}\r\n                            onChange={e => {\r\n                                setKeyWord(e.target.value)\r\n                            }}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Metier</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOptionMetier}\r\n                            getOptionLabel={met => met.libelle}\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez le metier\"\r\n                            onChange={handleChangeMetier}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Ville</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOtionVille}\r\n                            getOptionLabel={vil => vil.nom}\r\n                            isClearable={true}\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez la ville..\"\r\n                            onChange={value => {\r\n                                if (value) {\r\n                                    setValueVille(value.id);\r\n                                    setDisabled(false)\r\n                                } else {\r\n                                    setDisabled(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                    <Range\r\n                        step={0.1}\r\n                        min={1}\r\n                        max={150}\r\n                        values={range}\r\n                        disabled={disabled}\r\n                        onChange={values => setRange(values)}\r\n                        onFinalChange={values => setFinalRange(values)}\r\n                        renderTrack={({props, children}) => (\r\n                            <div\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n                                    height: '6px',\r\n                                    width: '100%',\r\n                                    backgroundColor: '#ccc'\r\n                                }}\r\n                            >\r\n                                {children}\r\n                            </div>\r\n                        )}\r\n                        renderThumb={({props}) => (\r\n                            <div\r\n\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n\r\n                                    height: '22px',\r\n                                    width: '22px',\r\n                                    backgroundColor: '#999'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <output style={{marginTop: \"30px\"}} id=\"output\">\r\n                        Distance s√©lectionn√©e {range - 1} Km\r\n                    </output>\r\n                    <output style={{marginTop: \"30px\"}} id=\"output\">\r\n                        Nombre de Cv disponible: {props.total}\r\n                    </output>\r\n                    <br/>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </Container>\r\n    )\r\n};\r\nconst styleSearch = {\r\n    position:'fixed',\r\n    backgroundColor: 'white',\r\n    opacity: '0.9',\r\n    marginTop: '10px',\r\n    boxShadow: \"10px 10px 1px #9E9E9E\",\r\n    minHeight: '90vh',\r\n    maxWidth: '365px',\r\n}\r\nexport default Search;\r\n","D:\\Dev\\reactSourcingV2\\src\\component\\details.js",["42","43","44","45"],"import React, {useEffect, useState} from \"react\";\r\nimport CVViewer from \"./CVViewer\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\n\r\n\r\nfunction Details(props) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if (props.cv.length !==0){\r\n\r\n        return(\r\n            <CVViewer cv={props.cv}/>\r\n\r\n        )\r\n    }\r\n    else if (props.cv.length === 0) {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Details;\r\n\r\n\r\n\r\n","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js",["46"],{"ruleId":"47","severity":1,"message":"48","line":2,"column":16,"nodeType":"49","messageId":"50","endLine":2,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":12,"column":9,"nodeType":"49","messageId":"50","endLine":12,"endColumn":14},{"ruleId":"47","severity":1,"message":"52","line":18,"column":12,"nodeType":"49","messageId":"50","endLine":18,"endColumn":16},{"ruleId":"47","severity":1,"message":"53","line":18,"column":18,"nodeType":"49","messageId":"50","endLine":18,"endColumn":25},{"ruleId":"47","severity":1,"message":"54","line":20,"column":12,"nodeType":"49","messageId":"50","endLine":20,"endColumn":21},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"47","severity":1,"message":"59","line":1,"column":9,"nodeType":"49","messageId":"50","endLine":1,"endColumn":19},{"ruleId":"47","severity":1,"message":"60","line":1,"column":9,"nodeType":"49","messageId":"50","endLine":1,"endColumn":14},{"ruleId":"47","severity":1,"message":"61","line":6,"column":9,"nodeType":"49","messageId":"50","endLine":6,"endColumn":23},{"ruleId":"47","severity":1,"message":"62","line":13,"column":12,"nodeType":"49","messageId":"50","endLine":13,"endColumn":23},{"ruleId":"47","severity":1,"message":"63","line":16,"column":12,"nodeType":"49","messageId":"50","endLine":16,"endColumn":21},{"ruleId":"47","severity":1,"message":"64","line":16,"column":23,"nodeType":"49","messageId":"50","endLine":16,"endColumn":35},{"ruleId":"47","severity":1,"message":"65","line":22,"column":12,"nodeType":"49","messageId":"50","endLine":22,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":65,"column":8,"nodeType":"68","endLine":65,"endColumn":69,"suggestions":"69"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":16,"nodeType":"49","messageId":"50","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"70","line":1,"column":27,"nodeType":"49","messageId":"50","endLine":1,"endColumn":35},{"ruleId":"47","severity":1,"message":"51","line":3,"column":9,"nodeType":"49","messageId":"50","endLine":3,"endColumn":14},{"ruleId":"47","severity":1,"message":"61","line":3,"column":16,"nodeType":"49","messageId":"50","endLine":3,"endColumn":30},{"ruleId":"71","severity":1,"message":"72","line":21,"column":47,"nodeType":"73","endLine":22,"endColumn":130},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'item' is assigned a value but never used.","'setItem' is assigned a value but never used.","'noRefrech' is assigned a value but never used.","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'Breadcrumb' is defined but never used.","'Badge' is defined but never used.","'ToastContainer' is defined but never used.","'valueMetier' is assigned a value but never used.","'recruteur' is assigned a value but never used.","'setRecruteur' is assigned a value but never used.","'countCv' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeParam' and 'props.countCV'. Either include them or remove the dependency array. If 'setCountCv' needs the current value of 'props.countCV', you can also switch to useReducer instead of useState and read 'props.countCV' in the reducer.","ArrayExpression",["76"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [keyWord, valueVille, finalRange, statusRecruteur, noRefrech, props.countCV, changeParam]",{"range":"79","text":"80"},[2239,2300],"[keyWord, valueVille, finalRange, statusRecruteur, noRefrech, props.countCV, changeParam]"]