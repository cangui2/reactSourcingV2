[{"D:\\Dev\\reactSourcingV2\\src\\index.js":"1","D:\\Dev\\reactSourcingV2\\src\\component\\results.js":"2","D:\\Dev\\reactSourcingV2\\src\\component\\search.js":"3","D:\\Dev\\reactSourcingV2\\src\\component\\details.js":"4","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js":"5"},{"size":2339,"mtime":1610632771137,"results":"6","hashOfConfig":"7"},{"size":1893,"mtime":1610632913126,"results":"8","hashOfConfig":"7"},{"size":7294,"mtime":1610548235070,"results":"9","hashOfConfig":"7"},{"size":744,"mtime":1610437550394,"results":"10","hashOfConfig":"7"},{"size":6861,"mtime":1610631890133,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1q000gm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"19"},"D:\\Dev\\reactSourcingV2\\src\\index.js",["26","27"],"D:\\Dev\\reactSourcingV2\\src\\component\\results.js",["28","29","30","31","32","33","34"],"D:\\Dev\\reactSourcingV2\\src\\component\\search.js",["35","36","37","38","39","40","41","42","43"],"import {ButtonGroup, Col, Container, Form, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\r\nimport AsyncSelect from 'react-select/async';\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from 'axios'\r\nimport {Range} from \"react-range\";\r\n\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    // All constant useState\r\n    const [valueMetier, setValueMetier] = useState([]);\r\n    const [valueVille, setValueVille] = useState('');\r\n    const [keyWord, setKeyWord] = useState('');\r\n    const [recruteur, setRecruteur] = useState('6');\r\n    const [statusAll, setStatusALL] = useState(false);\r\n    const [statusRecruteur, setStatusRecruteur] = useState(false);\r\n    const [checked, setChecked] = useState('info');\r\n    const [range, setRange] = useState([1]);\r\n    const [finalRange, setFinalRange] = useState([1]);\r\n    const [disabled,setDisabled]=useState(true);\r\n\r\n\r\n\r\n    // Recherche Api\r\n    const loadOptionMetier = (valueMetier, callback) => {\r\n        console.log(axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier))\r\n        axios.get(\"https://127.0.0.1:8000/api/metiers?libelle=\" + valueMetier)\r\n            .then((met) => {\r\n                callback(met.data);\r\n            });\r\n    }\r\n    const loadOtionVille = (value, callback) => {\r\n        axios.get(\"https://127.0.0.1:8000/api/villes?nom=\" + value)\r\n            .then((vil) => {\r\n                callback(vil.data);\r\n            });\r\n    }\r\n\r\n\r\n    // Si la valeur change on modifie.\r\n    const handleChangeMetier = value => {\r\n        setValueMetier(value);\r\n\r\n    }\r\n    const changeParam = () => {\r\n        let params = [];\r\n            if (keyWord) {\r\n                params.push('keyword=' + keyWord);\r\n            }\r\n            if (statusRecruteur) {\r\n                params.push('recruteur=6');\r\n            }\r\n            if (valueVille){\r\n                params.push('ville='+valueVille);\r\n                params.push('rayon='+range);\r\n            }\r\n\r\n            props.onDemandeCvChanged(params.join(\"&\"));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        changeParam();\r\n    }, [keyWord, valueVille, finalRange,statusRecruteur])\r\n\r\n\r\n    return (\r\n        <Container style={styleSearch}>\r\n            <Row style={{marginLeft: '0', marginRight: '0', paddingTop: '10px'}}>\r\n                <Col>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={1}>\r\n                    <ToggleButton\r\n                        type=\"checkbox\"\r\n                        variant='info'\r\n                        value={2}\r\n                        onChange={event => setStatusRecruteur(true)}\r\n                        //onClick={setStatusRecruteur(true)}\r\n                    >\r\n                        Ma Cvthèque\r\n                    </ToggleButton>\r\n\r\n                        &emsp;\r\n\r\n                    <ToggleButton\r\n                        type=\"radio\"\r\n                        variant=\"info\"\r\n                        value={1}\r\n                        onChange={event => setStatusRecruteur(false)}\r\n                        //onClick={}\r\n                    >\r\n                        Candidathèque\r\n                    </ToggleButton>\r\n                </ToggleButtonGroup>\r\n                                    </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridAddress1\">\r\n                        <Form.Label>Mot clé</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Metier, Competence ...\"\r\n                            onChange={e=>{setKeyWord(e.target.value)}}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Metier</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOptionMetier}\r\n                            getOptionLabel={met => met.libelle}\r\n                            //getOptionLabel={ (met) => { return met.nom } }\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez le metier\"\r\n                            onChange={handleChangeMetier}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formGridState\">\r\n                        <Form.Label>Ville</Form.Label>\r\n                        <AsyncSelect\r\n                            className=\"mb-2\"\r\n                            loadOptions={loadOtionVille}\r\n                            getOptionLabel={vil => vil.nom}\r\n                            isClearable={true}\r\n                            //getOptionLabel={ (met) => { return met.nom } }\r\n                            components={{DropdownIndicator: () => null, IndicatorSeparator: () => null}}\r\n                            placeholder=\"Saisissez la ville..\"\r\n                            onChange={value=>{setValueVille(value.id);setDisabled(false)}}\r\n                            //onInputChange={changeParam}\r\n                        />\r\n                    </Form.Group>\r\n                    <Range\r\n                        step={0.1}\r\n                        min={1}\r\n                        max={150}\r\n                        values={range}\r\n                        disabled={disabled}\r\n                        onChange={values => setRange(values)}\r\n                        onFinalChange={values => setFinalRange(values)}\r\n                        renderTrack={({props, children}) => (\r\n                            <div\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n                                    height: '6px',\r\n                                    width: '100%',\r\n                                    backgroundColor: '#ccc'\r\n                                }}\r\n                            >\r\n                                {children}\r\n                            </div>\r\n                        )}\r\n                        renderThumb={({props}) => (\r\n                            <div\r\n\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n\r\n                                    height: '22px',\r\n                                    width: '22px',\r\n                                    backgroundColor: '#999'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <output style={{marginTop: \"30px\" }} id=\"output\">\r\n                        Distance sélectionner {range-1} Km\r\n                    </output>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n};\r\nconst styleSearch = {\r\n\r\n    //border:'2px solid #000000',\r\n    backgroundColor: 'white',\r\n    opacity: '0.9',\r\n    marginTop: '10px',\r\n    boxShadow: \"10px 10px 1px #9E9E9E\",\r\n    minHeight: '90vh',\r\n    maxWidth: '395px',\r\n\r\n\r\n}\r\nexport default Search;\r\n",["44","45"],"D:\\Dev\\reactSourcingV2\\src\\component\\details.js",["46","47","48","49","50","51","52","53","54","55","56"],"import React, {useState} from \"react\";\r\nimport {Button, Card, Col, Container, Image, Row} from \"react-bootstrap\";\r\nimport {pdfjs} from 'react-pdf'\r\nimport image from \"../avatar.png\";\r\nimport CVViewer from \"./CVViewer\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\n\r\n\r\n\r\nfunction Details (props) {\r\n\r\n\r\n\r\n    if (props.cv.length !== 0)\r\n        return (\r\n                <CVViewer cv={props.cv} />\r\n        )\r\n    else if (props.cv.length === 0) {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details;\r\n\r\n\r\nconst styleSearch = {\r\n\r\n    //border:'2px solid #000000',\r\n    width: '38rem',\r\n    marginTop: '10px',\r\n    boxShadow: \"1px 1px 1px #9E9E9E\",\r\n    backgroundColor: 'white',\r\n    opacity: '0.9',\r\n\r\n}\r\n","D:\\Dev\\reactSourcingV2\\src\\component\\CVViewer.js",["57","58","59","60"],"import React from 'react';\r\nimport {Button, Card, Container} from 'react-bootstrap';\r\nimport avatar from '../avatar.png'\r\n\r\nimport './CV.css';\r\nimport * as PropTypes from \"prop-types\";\r\n\r\n\r\nclass Fragment extends React.Component {\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nFragment.propTypes = {children: PropTypes.node};\r\nconst CVViewer = (props) => {\r\nconsole.log(props.cv);\r\n\r\n        return (\r\n\r\n\r\n                    <div className=\"paper\"style={paperStyle}>\r\n                        <link rel=\"stylesheet\" href=\"/template3-7.css\" />\r\n                        <section className=\"identite\">\r\n                                <div className=\"nom\">{props.cv.candidat.prenom} {props.cv.candidat.nom}</div>\r\n                            <section className=\"photo\">\r\n                                <div className=\"portrait\"><img src={avatar} style={{width:'15%',paddingTop:'32px',paddingLeft:'3px'}}/></div>\r\n                            </section>\r\n                            </section>\r\n\r\n\r\n\r\n                        <section className=\"profil\">\r\n\r\n                            <header>Contact</header>\r\n\r\n                            <div className=\"adresse\">{props.cv.candidat.adresse}</div>\r\n                            <div className=\"ville\">{props.cv.candidat.ville}</div>\r\n                            <div className=\"phone\">{props.cv.candidat.telephone}</div>\r\n                            <div className=\"email\">{props.cv.candidat.email}</div>\r\n\r\n                        </section>\r\n\r\n\r\n                        <section className=\"titre\">\r\n\r\n                            <div className=\"poste\">{props.cv.metier.libelle}</div>\r\n\r\n                        </section>\r\n\r\n                        <section className=\"intro\">\r\n                            <header>Profil</header>\r\n\r\n                            <div className=\"text\">{props.cv.titre}</div>\r\n\r\n                        </section>\r\n\r\n                        <section className=\"experiences\">\r\n                            <header>Experiences</header>\r\n                            <div >\r\n                                {props.cv.experiences.map(experience => (\r\n                                        <div className=\"experience\"  >\r\n                                            <div className=\"date-debut\">{experience.dateDebut}</div>\r\n                                            <div className=\"date-fin\">{experience.dateFin}</div>\r\n                                            <div className=\"entreprise\">{experience.entreprise}</div>\r\n                                            <div className=\"ville\">{experience.ville}</div>\r\n                                            <div className=\"logo\">{experience.logo}</div>\r\n                                            <div className=\"titre\">{experience.titre}</div>\r\n                                            <div className=\"desciption\">{experience.description}</div>\r\n                                        </div>\r\n                                    ))}\r\n                            </div>\r\n                        </section>\r\n\r\n                        <section className=\"formations\">\r\n                            <header>Formations</header>\r\n                            <div >\r\n                                {props.cv.formations.map(formations => (\r\n                                        <div className=\"formation\"  >\r\n                                            <div className=\"date-debut\">{formations.dateDebut}</div>\r\n                                            <div className=\"date-fin\">{formations.dateFin}</div>\r\n                                            <div className=\"ecole\">{formations.ecole}</div>\r\n                                            <div className=\"titre\">{formations.diplome}</div>\r\n                                            <div className=\"niveau\">{formations.niveau}</div>\r\n                                            <div className=\"desciption\">{formations.description}</div>\r\n                                        </div>\r\n                                ))}\r\n                            </div>\r\n                        </section>\r\n\r\n                        <section className=\"competences\">\r\n                            <header>Competences</header>\r\n                            <div >\r\n                                {\r\n                                    props.cv.competences.map((competence, index) =>\r\n                                        <div className=\"competence\"  key={index}>\r\n                                            <div className=\"libelle\">{competence.libelle}</div>\r\n                                            <div className={\"niveau niveau-\" + competence.niveau}>{competence.niveau}</div>\r\n                                            <meter max=\"5\" value={competence.niveau}></meter>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </section>\r\n                        <section className=\"langues\">\r\n                            <header>Langues</header>\r\n                            <div >\r\n                                {\r\n                                    props.cv.langues.map((langue, index) =>\r\n                                        <div className=\"langue\"  key={index}>\r\n                                            <div className=\"libelle\">{langue.libelle}</div>\r\n                                            <div className=\"niveau\">{langue.niveau}</div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </section>\r\n                        <section className=\"reseaux\">\r\n                            <header>Réseaux</header>\r\n                            <div >\r\n                                {\r\n                                    props.cv.reseaux.map((reseau, index) =>\r\n                                        <div className=\"reseau\"  key={index}>\r\n                                            <div className=\"libelle no-screen\">{reseau.type}</div>\r\n                                            <div className=\"libelle no-screen\">{reseau.url}</div>\r\n                                            <div className=\"niveau no-print\">\r\n                                                <a href=\"{reseau.url}\">{reseau.type}</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n        );\r\n\r\n}\r\n\r\nexport default CVViewer;\r\n\r\nconst paperStyle ={\r\n\r\n    marginTop:'0px',\r\n    transform:'scale(1)',\r\n    //gridTemplateRows:'0fr 0fr',\r\n    width:'auto'\r\n   // marginRight:'-120px'\r\n}\r\n",{"ruleId":"61","severity":1,"message":"62","line":15,"column":12,"nodeType":"63","messageId":"64","endLine":15,"endColumn":16},{"ruleId":"61","severity":1,"message":"65","line":15,"column":18,"nodeType":"63","messageId":"64","endLine":15,"endColumn":25},{"ruleId":"61","severity":1,"message":"66","line":1,"column":9,"nodeType":"63","messageId":"64","endLine":1,"endColumn":18},{"ruleId":"61","severity":1,"message":"67","line":1,"column":36,"nodeType":"63","messageId":"64","endLine":1,"endColumn":46},{"ruleId":"61","severity":1,"message":"68","line":1,"column":55,"nodeType":"63","messageId":"64","endLine":1,"endColumn":60},{"ruleId":"61","severity":1,"message":"69","line":1,"column":62,"nodeType":"63","messageId":"64","endLine":1,"endColumn":68},{"ruleId":"61","severity":1,"message":"70","line":1,"column":83,"nodeType":"63","messageId":"64","endLine":1,"endColumn":88},{"ruleId":"61","severity":1,"message":"71","line":8,"column":12,"nodeType":"63","messageId":"64","endLine":8,"endColumn":18},{"ruleId":"61","severity":1,"message":"72","line":71,"column":7,"nodeType":"63","messageId":"64","endLine":71,"endColumn":11},{"ruleId":"61","severity":1,"message":"73","line":1,"column":9,"nodeType":"63","messageId":"64","endLine":1,"endColumn":20},{"ruleId":"61","severity":1,"message":"74","line":12,"column":12,"nodeType":"63","messageId":"64","endLine":12,"endColumn":23},{"ruleId":"61","severity":1,"message":"75","line":15,"column":12,"nodeType":"63","messageId":"64","endLine":15,"endColumn":21},{"ruleId":"61","severity":1,"message":"76","line":15,"column":23,"nodeType":"63","messageId":"64","endLine":15,"endColumn":35},{"ruleId":"61","severity":1,"message":"77","line":16,"column":12,"nodeType":"63","messageId":"64","endLine":16,"endColumn":21},{"ruleId":"61","severity":1,"message":"78","line":16,"column":23,"nodeType":"63","messageId":"64","endLine":16,"endColumn":35},{"ruleId":"61","severity":1,"message":"79","line":18,"column":12,"nodeType":"63","messageId":"64","endLine":18,"endColumn":19},{"ruleId":"61","severity":1,"message":"80","line":18,"column":21,"nodeType":"63","messageId":"64","endLine":18,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":65,"column":8,"nodeType":"83","endLine":65,"endColumn":57,"suggestions":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"61","severity":1,"message":"89","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":24},{"ruleId":"61","severity":1,"message":"69","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":15},{"ruleId":"61","severity":1,"message":"90","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":21},{"ruleId":"61","severity":1,"message":"91","line":2,"column":23,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"61","severity":1,"message":"66","line":2,"column":28,"nodeType":"63","messageId":"64","endLine":2,"endColumn":37},{"ruleId":"61","severity":1,"message":"92","line":2,"column":39,"nodeType":"63","messageId":"64","endLine":2,"endColumn":44},{"ruleId":"61","severity":1,"message":"93","line":2,"column":46,"nodeType":"63","messageId":"64","endLine":2,"endColumn":49},{"ruleId":"61","severity":1,"message":"94","line":3,"column":9,"nodeType":"63","messageId":"64","endLine":3,"endColumn":14},{"ruleId":"61","severity":1,"message":"95","line":4,"column":8,"nodeType":"63","messageId":"64","endLine":4,"endColumn":13},{"ruleId":"61","severity":1,"message":"96","line":6,"column":13,"nodeType":"63","messageId":"64","endLine":6,"endColumn":22},{"ruleId":"61","severity":1,"message":"97","line":29,"column":7,"nodeType":"63","messageId":"64","endLine":29,"endColumn":18},{"ruleId":"61","severity":1,"message":"69","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":15},{"ruleId":"61","severity":1,"message":"90","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":21},{"ruleId":"61","severity":1,"message":"66","line":2,"column":23,"nodeType":"63","messageId":"64","endLine":2,"endColumn":32},{"ruleId":"98","severity":1,"message":"99","line":27,"column":59,"nodeType":"100","endLine":27,"endColumn":136},"no-unused-vars","'item' is assigned a value but never used.","Identifier","unusedVar","'setItem' is assigned a value but never used.","'Container' is defined but never used.","'Pagination' is defined but never used.","'Media' is defined but never used.","'Button' is defined but never used.","'Badge' is defined but never used.","'select' is assigned a value but never used.","'test' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'valueMetier' is assigned a value but never used.","'recruteur' is assigned a value but never used.","'setRecruteur' is assigned a value but never used.","'statusAll' is assigned a value but never used.","'setStatusALL' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeParam'. Either include it or remove the dependency array.","ArrayExpression",["101"],"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"'useState' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Image' is defined but never used.","'Row' is defined but never used.","'pdfjs' is defined but never used.","'image' is defined but never used.","'PropTypes' is defined but never used.","'styleSearch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"104","fix":"105"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [keyWord, valueVille, finalRange, statusRecruteur, changeParam]",{"range":"106","text":"107"},[2074,2123],"[keyWord, valueVille, finalRange, statusRecruteur, changeParam]"]